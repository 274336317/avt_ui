/************************************************************************
 *				北京科银京成技术有限公司 版权所有
 *    Copyright (C) 2000-2011 CoreTek Systems Inc. All Rights Reserved.
 ***********************************************************************/

package com.coretek.spte.testcase;

import java.util.UUID;

import com.coretek.common.template.XMLBean;
import com.coretek.common.template.build.codeTemplate.Entity;
import com.coretek.common.template.build.codeTemplate.EntityRules;
import com.coretek.common.template.build.codeTemplate.FieldRules;
import com.coretek.common.utils.StringUtils;

/**
 * 此类对应于xml上的 "timeSpan" 节点. 如果您不是专业人士，请不要修改此文件.
 * 
 * @author GENERATED BY SPTE_CODE_ROBOT
 */
@EntityRules(xpath = "timeSpan", xmlName = "timeSpan", displayField = "", dragable = false, superClazz = "com.coretek.common.template.XMLBean")
public class TimeSpan extends com.coretek.common.template.XMLBean
{
	/** */
	private static final long	serialVersionUID	= -1015974098960663032L;
	// 此属性对应于"value"
	@FieldRules(xmlName = "value", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				value;
	// 此属性对应于"uuid"
	@FieldRules(xmlName = "uuid", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				uuid;

	public String getValue()
	{
		return this.value;
	}

	public void setValue(String value)
	{
		this.value = value;
	}

	public String getUuid()
	{
		return this.uuid;
	}

	public void setUuid(String uuid)
	{
		this.uuid = uuid;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.coretek.common.template.XMLBean#clone() <br/> <b>Author</b>
	 * SunDawei </br> <b>Date</b> 2012-5-14
	 */
	@Override
	public Object clone() throws CloneNotSupportedException
	{
		TimeSpan span = (TimeSpan) super.clone();
		// 生成新的UUID，避免重复
		span.setUuid(UUID.randomUUID().toString());

		return span;
	}

	/*
	 * <b>作者</b> 李丰兵
	 * <b>日期</b> 2012-12-19
	 */
	@Override
	public String toXML()
	{
		java.lang.reflect.Field[] fields = this.getClass().getDeclaredFields();
		StringBuilder builder = new StringBuilder();
		EntityRules entityRule = this.getClass().getAnnotation(EntityRules.class);
		if (entityRule == null)
		{
			return "";
		}
		builder.append("<").append(entityRule.xmlName());
		for (java.lang.reflect.Field timespan : fields)
		{

			FieldRules rule = timespan.getAnnotation(FieldRules.class);
			timespan.setAccessible(true);
			if (rule != null && !rule.node())
			{// 节点属性
				if (timespan.getName().equals("value"))
				{
					if (this.getChildren() != null && this.getChildren().size() != 0)
					{
						// 字段还包含字段
						continue;
					}
				}
				try
				{
					String contents = timespan.get(this) != null ? timespan.get(this).toString() : "";
					builder.append(" ").append(rule.xmlName()).append("=\"").append(StringUtils.convert(contents)).append("\"");
				} catch (IllegalArgumentException e)
				{
					e.printStackTrace();
				} catch (IllegalAccessException e)
				{
					e.printStackTrace();
				}
			}
		}
		
		builder.append(" >").append("\n");
		
		for (java.lang.reflect.Field timespan : fields)
		{
			FieldRules rule = timespan.getAnnotation(FieldRules.class);
			if (rule != null && rule.node())
			{// 节点
				if (timespan.getName().equals("value"))
				{
					if (this.getChildren() != null && this.getChildren().size() != 0)
					{
						// 字段还包含字段
						continue;
					}
				}
				try
				{
					timespan.setAccessible(true);
					String contents = timespan.get(this) != null ? timespan.get(this).toString() : "";
					builder.append("    <").append(rule.xmlName()).append(">").append(contents).append("</").append(rule.xmlName()).append(">").append("\n");
				} catch (IllegalArgumentException e)
				{
					e.printStackTrace();
				} catch (IllegalAccessException e)
				{
					e.printStackTrace();
				}
			}
		}
		
		for (Entity child : this.getChildren())
		{
			builder.append("    ").append(((XMLBean) child).toXML());
		}

		builder.append("    </").append(entityRule.xmlName()).append(">").append("\n");

		return builder.toString();
	}
}