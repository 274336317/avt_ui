/************************************************************************
 *				北京科银京成技术有限公司 版权所有
 *    Copyright (C) 2000-2011 CoreTek Systems Inc. All Rights Reserved.
 ***********************************************************************/

package com.coretek.spte.testcase;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.coretek.common.template.XMLBean;
import com.coretek.common.template.build.codeTemplate.Entity;
import com.coretek.common.template.build.codeTemplate.EntityRules;
import com.coretek.common.template.build.codeTemplate.FieldRules;
import com.coretek.common.utils.StringUtils;

/**
 * 此类对应于xml上的 "field" 节点. 如果您不是专业人士，请不要修改此文件.
 * 
 * @author GENERATED BY SPTE_CODE_ROBOT
 */
@EntityRules(xpath = "field", xmlName = "field", displayField = "", dragable = false, superClazz = "com.coretek.common.template.XMLBean")
public class Field extends com.coretek.common.template.XMLBean implements Serializable, Cloneable
{

	private static final long	serialVersionUID	= 5609997247209742437L;
	// 此属性对应于"id"
	@FieldRules(xmlName = "id", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				id;
	// 此属性对应于"offsetword"
	@FieldRules(xmlName = "offsetword", display = false, type = "Integer", node = false, editable = false, textNode = false)
	private Integer				offsetword;
	// 此属性对应于"signed"
	@FieldRules(xmlName = "signed", display = false, type = "Boolean", node = false, editable = false, textNode = false)
	private Boolean				signed;
	// 此属性对应于"width"
	@FieldRules(xmlName = "width", display = false, type = "Integer", node = false, editable = false, textNode = false)
	private Integer				width;
	// 此属性对应于"name"
	@FieldRules(xmlName = "name", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				name;
	// 此属性对应于"value"
	@FieldRules(xmlName = "value", display = false, type = "String", node = true, editable = false, textNode = false)
	private String				value;
	// 此属性对应于"offset"
	@FieldRules(xmlName = "offsetbit", display = false, type = "Integer", node = false, editable = false, textNode = false)
	private Integer				offsetbit;
	// 此属性对应于"lsb"
	@FieldRules(xmlName = "lsb", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				lsb;
	// 此属性对应于"msb"
	@FieldRules(xmlName = "msb", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				msb;

	public String getId()
	{
		return this.id;
	}

	public void setId(String id)
	{
		this.id = id;
	}

	public Integer getOffsetword()
	{
		return this.offsetword;
	}

	public void setOffsetword(Integer offsetword)
	{
		this.offsetword = offsetword;
	}

	public Boolean getSigned()
	{
		return this.signed;
	}

	public void setSigned(Boolean signed)
	{
		this.signed = signed;
	}

	public Integer getWidth()
	{
		return this.width;
	}

	public void setWidth(Integer width)
	{
		this.width = width;
	}

	public String getName()
	{
		return this.name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public String getValue()
	{
		return this.value;
	}

	public void setValue(String value)
	{
		this.value = value;
	}

	public Integer getOffsetbit()
	{
		return this.offsetbit;
	}

	public void setOffsetbit(Integer offsetbit)
	{
		this.offsetbit = offsetbit;
	}

	public String getLsb()
	{
		return this.lsb;
	}

	public void setLsb(String lsb)
	{
		this.lsb = lsb;
	}

	public String getMsb()
	{
		return this.msb;
	}

	public void setMsb(String msb)
	{
		this.msb = msb;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object) <br/> <b>作者</b> 孙大巍 </br>
	 * <b>日期</b> 2012-2-6
	 */
	@Override
	public boolean equals(Object obj)
	{
		if (obj == null)
			return false;
		if (this == obj)
			return true;
		if (obj instanceof Field)
		{
			Field field = (Field) obj;
			if (field.id.equals(this.id))
			{
				if (field.name.equals(this.name))
				{
					if (field.offsetbit.equals(this.offsetbit))
					{
						if (field.offsetword.equals(this.offsetword))
						{
							if (field.width.equals(this.width))
							{
								if (this.getChildren() != null && this.getChildren().size() != 0)
								{
									if (this.getChildren().equals(field.getChildren()))
									{
										return true;
									}
								} else if (StringUtils.isNotNull(value) && this.value.equals(field.value))
								{
									return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.coretek.common.template.build.codeTemplate.Entity#addChild(com.coretek
	 * .common.template.build.codeTemplate.Entity) <br/> <b>作者</b> 孙大巍 </br>
	 * <b>日期</b> 2012-1-9
	 */
	@Override
	public void addChild(Entity entity)
	{
		super.addChild(entity);
		if (entity.getParent() == null)
			entity.setParent(this);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#clone() <br/> <b>作者</b> 孙大巍 </br> <b>日期</b>
	 * 2012-1-10
	 */
	@Override
	public Object clone() throws CloneNotSupportedException
	{
		Field cloned = (Field) super.clone();
		List<Entity> children = this.getChildren();
		cloned.setChildren(new ArrayList<Entity>());
		List<Entity> clonedChildren = new ArrayList<Entity>(children.size());
		cloned.setParent(null);
		for (Entity child : children)
		{
			Field field = (Field) child;
			Field clonedField = (Field) field.clone();
			clonedField.setXmlName(field.getXmlName());
			clonedField.setXpath(field.getXpath());
			clonedChildren.add(clonedField);

		}

		for (Entity entity : clonedChildren)
		{
			entity.setParent(cloned);
		}

		cloned.setChildren(clonedChildren);

		return cloned;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.coretek.common.template.XMLBean#toXML() <br/> <b>作者</b> 孙大巍
	 * </br> <b>日期</b> 2012-1-16
	 */
	@Override
	public String toXML()
	{
		java.lang.reflect.Field[] fields = this.getClass().getDeclaredFields();
		StringBuilder builder = new StringBuilder();
		EntityRules entityRule = this.getClass().getAnnotation(EntityRules.class);
		if (entityRule == null)
		{
			return "";
		}
		builder.append("<").append(entityRule.xmlName());
		for (java.lang.reflect.Field field : fields)
		{

			FieldRules rule = field.getAnnotation(FieldRules.class);
			field.setAccessible(true);
			if (rule != null && !rule.node())
			{// 节点属性
				if (field.getName().equals("value"))
				{
					if (this.getChildren() != null && this.getChildren().size() != 0)
					{
						// 字段还包含字段
						continue;
					}
				}
				try
				{
					String contents = field.get(this) != null ? field.get(this).toString() : "";
					builder.append(" ").append(rule.xmlName()).append("=\"").append(contents).append("\"");
				} catch (IllegalArgumentException e)
				{
					e.printStackTrace();
				} catch (IllegalAccessException e)
				{
					e.printStackTrace();
				}
			}
		}

		builder.append(" >").append("\n");

		for (java.lang.reflect.Field field : fields)
		{
			FieldRules rule = field.getAnnotation(FieldRules.class);
			if (rule != null && rule.node())
			{// 节点
				if (field.getName().equals("value"))
				{
					if (this.getChildren() != null && this.getChildren().size() != 0)
					{
						// 字段还包含字段
						continue;
					}
				}
				try
				{
					field.setAccessible(true);
					String contents = field.get(this) != null ? field.get(this).toString() : "";
					builder.append("    <").append(rule.xmlName()).append(">").append(StringUtils.convert(contents)).append("</").append(rule.xmlName()).append(">").append("\n");
				} catch (IllegalArgumentException e)
				{
					e.printStackTrace();
				} catch (IllegalAccessException e)
				{
					e.printStackTrace();
				}
			}
		}

		for (Entity child : this.getChildren())
		{
			builder.append("    ").append(((XMLBean) child).toXML());
		}

		builder.append("    </").append(entityRule.xmlName()).append(">").append("\n");

		return builder.toString();
	}

}
