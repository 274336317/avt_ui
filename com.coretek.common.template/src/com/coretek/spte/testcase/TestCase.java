/************************************************************************
 *				北京科银京成技术有限公司 版权所有
 *    Copyright (C) 2000-2011 CoreTek Systems Inc. All Rights Reserved.
 ***********************************************************************/

package com.coretek.spte.testcase;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.coretek.common.template.XMLBean;
import com.coretek.common.template.build.codeTemplate.Entity;
import com.coretek.common.template.build.codeTemplate.EntityRules;
import com.coretek.common.template.build.codeTemplate.FieldRules;

/**
 * 此类对应于xml上的 "testCase" 节点. 如果您不是专业人士，请不要修改此文件.
 * 
 * @author GENERATED BY SPTE_CODE_ROBOT
 */
@EntityRules(xpath = "testCase", xmlName = "testCase", displayField = "", dragable = false, superClazz = "com.coretek.common.template.XMLBean")
public class TestCase extends com.coretek.common.template.XMLBean
{
	/** */
	private static final long	serialVersionUID	= 4622268052378345136L;
	// 此属性对应于"name"
	@FieldRules(xmlName = "name", display = false, type = "String", node = false, editable = false, textNode = false)
	private String				name;
	// 此属性对应于"version"
	@FieldRules(xmlName = "version", display = false, type = "String", node = true, editable = false, textNode = false)
	private String				version;

	public String getName()
	{
		return this.name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public String getVersion()
	{
		return this.version;
	}

	public void setVersion(String version)
	{
		this.version = version;
	}

	/**
	 * 获取测试用例被测对象列表（如果不是测试用例对象调用该方法；则返回null）
	 * 
	 * @return </br> <b>作者</b> 杜一森 </br> <b>日期</b> 2011-12-29
	 */
	public Entity getTestedObjects()
	{
		Entity testedObj = null;
		for (Entity en : this.getChildren())
		{
			if (en instanceof TestedObjects)
			{
				testedObj = en;
				break;
			}
		}
		return testedObj;
	}

	/**
	 * 获取测试用例的消息列表（如果不是测试用例对象调用该方法；则返回空）
	 * 
	 * @return </br> <b>作者</b> 杜一森 </br> <b>日期</b> 2012-01-02
	 */
	public List<Entity> getAllMsgOfTestCase()
	{
		List<Entity> entities = new ArrayList<Entity>();
		for (Entity en : this.getChildren())
		{
			if (en instanceof MessageBlock)
			{
				return en.getChildren();
			}
		}
		return entities;
	}

	/**
	 * 根据UUID的范围获取测试用例中的消息，供调试消息用
	 * 
	 * @param startUUID 起始消息的UUID
	 * @param endUUID 结束消息的UUID
	 * @return <b>作者</b> 张翼 </br> <b>日期</b> 2012-04-24
	 */
	public List<Entity> getMsgOfTestCaseByRange(String startUUID, String endUUID)
	{
		List<Entity> list = getMsgBlockofTestCase().getChildren();
		int start = 0, end = list.size() - 1;
		for (Entity entity : list)
		{
			Message message = (Message) entity;
			if (message.getUuid().equals(startUUID))
			{
				start = list.indexOf(message);
			}
			if (message.getUuid().equals(endUUID))
			{
				end = list.indexOf(message);
			}
		}
		return Arrays.asList(Arrays.copyOfRange(list.toArray(new Entity[end + 1 - start]), start, end + 1));

	}

	public CaseDescription getCaseDes()
	{
		CaseDescription caseDescription = null;
		for (Entity en : this.getChildren())
		{
			if (en instanceof CaseDescription)
			{
				caseDescription = (CaseDescription) en;
				;
				return caseDescription;
			}
		}
		return caseDescription;
	}

	/**
	 * 获取测试用例的消息列表对象
	 * 
	 * @return </br> <b>作者</b> 杜一森 </br> <b>日期</b> 2012-01-05
	 */
	public MessageBlock getMsgBlockofTestCase()
	{
		MessageBlock msgBlock = null;
		for (Entity en : this.getChildren())
		{
			if (en instanceof MessageBlock)
			{
				msgBlock = (MessageBlock) en;
				return msgBlock;
			}
		}
		return msgBlock;
	}

	/**
	 * 获取测试用例的标签列表对象
	 * 
	 * @return </br> <b>作者</b> 杜一森 </br> <b>日期</b> 2012-03-13
	 */
	public Postils getPostilsOfTestCase()
	{
		Postils postils = null;
		for (Entity en : this.getChildren())
		{
			if (en instanceof Postils)
			{
				postils = (Postils) en;
				return postils;
			}
		}
		return postils;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#clone() <br/> <b>作者</b> 孙大巍 </br> <b>日期</b>
	 * 2012-4-24
	 */
	@Override
	public Object clone() throws CloneNotSupportedException
	{
		List<Entity> dest = new ArrayList<Entity>(this.getChildren().size());
		for (Entity entity : this.getChildren())
		{
			XMLBean xmlBean = (XMLBean) entity;
			XMLBean cloned = (XMLBean) xmlBean.clone();
			dest.add(cloned);
		}
		TestCase tc = (TestCase) super.clone();
		tc.setChildren(dest);
		return tc;
	}

}